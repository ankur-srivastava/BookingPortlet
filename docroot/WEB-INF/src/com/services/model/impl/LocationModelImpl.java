/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.services.model.Location;
import com.services.model.LocationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Location service. Represents a row in the &quot;JPB_Location&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.services.model.LocationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LocationImpl}.
 * </p>
 *
 * @author Ankur Srivastava
 * @see LocationImpl
 * @see com.services.model.Location
 * @see com.services.model.LocationModel
 * @generated
 */
public class LocationModelImpl extends BaseModelImpl<Location>
	implements LocationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a location model instance should use the {@link com.services.model.Location} interface instead.
	 */
	public static final String TABLE_NAME = "JPB_Location";
	public static final Object[][] TABLE_COLUMNS = {
			{ "locationId", Types.BIGINT },
			{ "locationName", Types.VARCHAR },
			{ "streetAddress1", Types.VARCHAR },
			{ "streetAddress2", Types.VARCHAR },
			{ "locationZip", Types.VARCHAR },
			{ "locationCityName", Types.VARCHAR },
			{ "locationStateName", Types.VARCHAR },
			{ "latitude", Types.VARCHAR },
			{ "longitude", Types.VARCHAR },
			{ "comments", Types.VARCHAR },
			{ "active_", Types.BOOLEAN },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table JPB_Location (locationId LONG not null primary key,locationName VARCHAR(75) null,streetAddress1 VARCHAR(75) null,streetAddress2 VARCHAR(75) null,locationZip VARCHAR(75) null,locationCityName VARCHAR(75) null,locationStateName VARCHAR(75) null,latitude VARCHAR(75) null,longitude VARCHAR(75) null,comments VARCHAR(75) null,active_ BOOLEAN,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table JPB_Location";
	public static final String ORDER_BY_JPQL = " ORDER BY location.locationName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY JPB_Location.locationName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.services.model.Location"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.services.model.Location"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.services.model.Location"),
			true);
	public static long ACTIVE_COLUMN_BITMASK = 1L;
	public static long LOCATIONCITYNAME_COLUMN_BITMASK = 2L;
	public static long LOCATIONNAME_COLUMN_BITMASK = 4L;
	public static long LOCATIONZIP_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.services.model.Location"));

	public LocationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _locationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLocationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _locationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Location.class;
	}

	@Override
	public String getModelClassName() {
		return Location.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("locationId", getLocationId());
		attributes.put("locationName", getLocationName());
		attributes.put("streetAddress1", getStreetAddress1());
		attributes.put("streetAddress2", getStreetAddress2());
		attributes.put("locationZip", getLocationZip());
		attributes.put("locationCityName", getLocationCityName());
		attributes.put("locationStateName", getLocationStateName());
		attributes.put("latitude", getLatitude());
		attributes.put("longitude", getLongitude());
		attributes.put("comments", getComments());
		attributes.put("active", getActive());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long locationId = (Long)attributes.get("locationId");

		if (locationId != null) {
			setLocationId(locationId);
		}

		String locationName = (String)attributes.get("locationName");

		if (locationName != null) {
			setLocationName(locationName);
		}

		String streetAddress1 = (String)attributes.get("streetAddress1");

		if (streetAddress1 != null) {
			setStreetAddress1(streetAddress1);
		}

		String streetAddress2 = (String)attributes.get("streetAddress2");

		if (streetAddress2 != null) {
			setStreetAddress2(streetAddress2);
		}

		String locationZip = (String)attributes.get("locationZip");

		if (locationZip != null) {
			setLocationZip(locationZip);
		}

		String locationCityName = (String)attributes.get("locationCityName");

		if (locationCityName != null) {
			setLocationCityName(locationCityName);
		}

		String locationStateName = (String)attributes.get("locationStateName");

		if (locationStateName != null) {
			setLocationStateName(locationStateName);
		}

		String latitude = (String)attributes.get("latitude");

		if (latitude != null) {
			setLatitude(latitude);
		}

		String longitude = (String)attributes.get("longitude");

		if (longitude != null) {
			setLongitude(longitude);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getLocationId() {
		return _locationId;
	}

	@Override
	public void setLocationId(long locationId) {
		_locationId = locationId;
	}

	@Override
	public String getLocationName() {
		if (_locationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _locationName;
		}
	}

	@Override
	public void setLocationName(String locationName) {
		_columnBitmask = -1L;

		if (_originalLocationName == null) {
			_originalLocationName = _locationName;
		}

		_locationName = locationName;
	}

	public String getOriginalLocationName() {
		return GetterUtil.getString(_originalLocationName);
	}

	@Override
	public String getStreetAddress1() {
		if (_streetAddress1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _streetAddress1;
		}
	}

	@Override
	public void setStreetAddress1(String streetAddress1) {
		_streetAddress1 = streetAddress1;
	}

	@Override
	public String getStreetAddress2() {
		if (_streetAddress2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _streetAddress2;
		}
	}

	@Override
	public void setStreetAddress2(String streetAddress2) {
		_streetAddress2 = streetAddress2;
	}

	@Override
	public String getLocationZip() {
		if (_locationZip == null) {
			return StringPool.BLANK;
		}
		else {
			return _locationZip;
		}
	}

	@Override
	public void setLocationZip(String locationZip) {
		_columnBitmask |= LOCATIONZIP_COLUMN_BITMASK;

		if (_originalLocationZip == null) {
			_originalLocationZip = _locationZip;
		}

		_locationZip = locationZip;
	}

	public String getOriginalLocationZip() {
		return GetterUtil.getString(_originalLocationZip);
	}

	@Override
	public String getLocationCityName() {
		if (_locationCityName == null) {
			return StringPool.BLANK;
		}
		else {
			return _locationCityName;
		}
	}

	@Override
	public void setLocationCityName(String locationCityName) {
		_columnBitmask |= LOCATIONCITYNAME_COLUMN_BITMASK;

		if (_originalLocationCityName == null) {
			_originalLocationCityName = _locationCityName;
		}

		_locationCityName = locationCityName;
	}

	public String getOriginalLocationCityName() {
		return GetterUtil.getString(_originalLocationCityName);
	}

	@Override
	public String getLocationStateName() {
		if (_locationStateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _locationStateName;
		}
	}

	@Override
	public void setLocationStateName(String locationStateName) {
		_locationStateName = locationStateName;
	}

	@Override
	public String getLatitude() {
		if (_latitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _latitude;
		}
	}

	@Override
	public void setLatitude(String latitude) {
		_latitude = latitude;
	}

	@Override
	public String getLongitude() {
		if (_longitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _longitude;
		}
	}

	@Override
	public void setLongitude(String longitude) {
		_longitude = longitude;
	}

	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_columnBitmask |= ACTIVE_COLUMN_BITMASK;

		if (!_setOriginalActive) {
			_setOriginalActive = true;

			_originalActive = _active;
		}

		_active = active;
	}

	public boolean getOriginalActive() {
		return _originalActive;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Location.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Location toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Location)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LocationImpl locationImpl = new LocationImpl();

		locationImpl.setLocationId(getLocationId());
		locationImpl.setLocationName(getLocationName());
		locationImpl.setStreetAddress1(getStreetAddress1());
		locationImpl.setStreetAddress2(getStreetAddress2());
		locationImpl.setLocationZip(getLocationZip());
		locationImpl.setLocationCityName(getLocationCityName());
		locationImpl.setLocationStateName(getLocationStateName());
		locationImpl.setLatitude(getLatitude());
		locationImpl.setLongitude(getLongitude());
		locationImpl.setComments(getComments());
		locationImpl.setActive(getActive());
		locationImpl.setCreateDate(getCreateDate());
		locationImpl.setModifiedDate(getModifiedDate());

		locationImpl.resetOriginalValues();

		return locationImpl;
	}

	@Override
	public int compareTo(Location location) {
		int value = 0;

		value = getLocationName().compareTo(location.getLocationName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Location)) {
			return false;
		}

		Location location = (Location)obj;

		long primaryKey = location.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LocationModelImpl locationModelImpl = this;

		locationModelImpl._originalLocationName = locationModelImpl._locationName;

		locationModelImpl._originalLocationZip = locationModelImpl._locationZip;

		locationModelImpl._originalLocationCityName = locationModelImpl._locationCityName;

		locationModelImpl._originalActive = locationModelImpl._active;

		locationModelImpl._setOriginalActive = false;

		locationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Location> toCacheModel() {
		LocationCacheModel locationCacheModel = new LocationCacheModel();

		locationCacheModel.locationId = getLocationId();

		locationCacheModel.locationName = getLocationName();

		String locationName = locationCacheModel.locationName;

		if ((locationName != null) && (locationName.length() == 0)) {
			locationCacheModel.locationName = null;
		}

		locationCacheModel.streetAddress1 = getStreetAddress1();

		String streetAddress1 = locationCacheModel.streetAddress1;

		if ((streetAddress1 != null) && (streetAddress1.length() == 0)) {
			locationCacheModel.streetAddress1 = null;
		}

		locationCacheModel.streetAddress2 = getStreetAddress2();

		String streetAddress2 = locationCacheModel.streetAddress2;

		if ((streetAddress2 != null) && (streetAddress2.length() == 0)) {
			locationCacheModel.streetAddress2 = null;
		}

		locationCacheModel.locationZip = getLocationZip();

		String locationZip = locationCacheModel.locationZip;

		if ((locationZip != null) && (locationZip.length() == 0)) {
			locationCacheModel.locationZip = null;
		}

		locationCacheModel.locationCityName = getLocationCityName();

		String locationCityName = locationCacheModel.locationCityName;

		if ((locationCityName != null) && (locationCityName.length() == 0)) {
			locationCacheModel.locationCityName = null;
		}

		locationCacheModel.locationStateName = getLocationStateName();

		String locationStateName = locationCacheModel.locationStateName;

		if ((locationStateName != null) && (locationStateName.length() == 0)) {
			locationCacheModel.locationStateName = null;
		}

		locationCacheModel.latitude = getLatitude();

		String latitude = locationCacheModel.latitude;

		if ((latitude != null) && (latitude.length() == 0)) {
			locationCacheModel.latitude = null;
		}

		locationCacheModel.longitude = getLongitude();

		String longitude = locationCacheModel.longitude;

		if ((longitude != null) && (longitude.length() == 0)) {
			locationCacheModel.longitude = null;
		}

		locationCacheModel.comments = getComments();

		String comments = locationCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			locationCacheModel.comments = null;
		}

		locationCacheModel.active = getActive();

		Date createDate = getCreateDate();

		if (createDate != null) {
			locationCacheModel.createDate = createDate.getTime();
		}
		else {
			locationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			locationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			locationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return locationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{locationId=");
		sb.append(getLocationId());
		sb.append(", locationName=");
		sb.append(getLocationName());
		sb.append(", streetAddress1=");
		sb.append(getStreetAddress1());
		sb.append(", streetAddress2=");
		sb.append(getStreetAddress2());
		sb.append(", locationZip=");
		sb.append(getLocationZip());
		sb.append(", locationCityName=");
		sb.append(getLocationCityName());
		sb.append(", locationStateName=");
		sb.append(getLocationStateName());
		sb.append(", latitude=");
		sb.append(getLatitude());
		sb.append(", longitude=");
		sb.append(getLongitude());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.services.model.Location");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>locationId</column-name><column-value><![CDATA[");
		sb.append(getLocationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationName</column-name><column-value><![CDATA[");
		sb.append(getLocationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>streetAddress1</column-name><column-value><![CDATA[");
		sb.append(getStreetAddress1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>streetAddress2</column-name><column-value><![CDATA[");
		sb.append(getStreetAddress2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationZip</column-name><column-value><![CDATA[");
		sb.append(getLocationZip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationCityName</column-name><column-value><![CDATA[");
		sb.append(getLocationCityName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationStateName</column-name><column-value><![CDATA[");
		sb.append(getLocationStateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latitude</column-name><column-value><![CDATA[");
		sb.append(getLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>longitude</column-name><column-value><![CDATA[");
		sb.append(getLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Location.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Location.class
		};
	private long _locationId;
	private String _locationName;
	private String _originalLocationName;
	private String _streetAddress1;
	private String _streetAddress2;
	private String _locationZip;
	private String _originalLocationZip;
	private String _locationCityName;
	private String _originalLocationCityName;
	private String _locationStateName;
	private String _latitude;
	private String _longitude;
	private String _comments;
	private boolean _active;
	private boolean _originalActive;
	private boolean _setOriginalActive;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private Location _escapedModel;
}