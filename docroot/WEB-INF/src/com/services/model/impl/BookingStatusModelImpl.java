/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.services.model.BookingStatus;
import com.services.model.BookingStatusModel;
import com.services.model.BookingStatusSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BookingStatus service. Represents a row in the &quot;JPB_BookingStatus&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.services.model.BookingStatusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookingStatusImpl}.
 * </p>
 *
 * @author Ankur Srivastava
 * @see BookingStatusImpl
 * @see com.services.model.BookingStatus
 * @see com.services.model.BookingStatusModel
 * @generated
 */
@JSON(strict = true)
public class BookingStatusModelImpl extends BaseModelImpl<BookingStatus>
	implements BookingStatusModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a booking status model instance should use the {@link com.services.model.BookingStatus} interface instead.
	 */
	public static final String TABLE_NAME = "JPB_BookingStatus";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bsId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "brtId", Types.BIGINT },
			{ "status", Types.VARCHAR },
			{ "tripStatus", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table JPB_BookingStatus (bsId LONG not null primary key,userId LONG,brtId LONG,status VARCHAR(75) null,tripStatus VARCHAR(75) null,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table JPB_BookingStatus";
	public static final String ORDER_BY_JPQL = " ORDER BY bookingStatus.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY JPB_BookingStatus.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.services.model.BookingStatus"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.services.model.BookingStatus"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.services.model.BookingStatus"),
			true);
	public static long BRTID_COLUMN_BITMASK = 1L;
	public static long STATUS_COLUMN_BITMASK = 2L;
	public static long TRIPSTATUS_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;
	public static long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BookingStatus toModel(BookingStatusSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BookingStatus model = new BookingStatusImpl();

		model.setBsId(soapModel.getBsId());
		model.setUserId(soapModel.getUserId());
		model.setBrtId(soapModel.getBrtId());
		model.setStatus(soapModel.getStatus());
		model.setTripStatus(soapModel.getTripStatus());
		model.setCreateDate(soapModel.getCreateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BookingStatus> toModels(BookingStatusSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BookingStatus> models = new ArrayList<BookingStatus>(soapModels.length);

		for (BookingStatusSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.services.model.BookingStatus"));

	public BookingStatusModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BookingStatus.class;
	}

	@Override
	public String getModelClassName() {
		return BookingStatus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bsId", getBsId());
		attributes.put("userId", getUserId());
		attributes.put("brtId", getBrtId());
		attributes.put("status", getStatus());
		attributes.put("tripStatus", getTripStatus());
		attributes.put("createDate", getCreateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long bsId = (Long)attributes.get("bsId");

		if (bsId != null) {
			setBsId(bsId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long brtId = (Long)attributes.get("brtId");

		if (brtId != null) {
			setBrtId(brtId);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String tripStatus = (String)attributes.get("tripStatus");

		if (tripStatus != null) {
			setTripStatus(tripStatus);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@JSON
	@Override
	public long getBsId() {
		return _bsId;
	}

	@Override
	public void setBsId(long bsId) {
		_bsId = bsId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getBrtId() {
		return _brtId;
	}

	@Override
	public void setBrtId(long brtId) {
		_columnBitmask |= BRTID_COLUMN_BITMASK;

		if (!_setOriginalBrtId) {
			_setOriginalBrtId = true;

			_originalBrtId = _brtId;
		}

		_brtId = brtId;
	}

	public long getOriginalBrtId() {
		return _originalBrtId;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@JSON
	@Override
	public String getTripStatus() {
		if (_tripStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _tripStatus;
		}
	}

	@Override
	public void setTripStatus(String tripStatus) {
		_columnBitmask |= TRIPSTATUS_COLUMN_BITMASK;

		if (_originalTripStatus == null) {
			_originalTripStatus = _tripStatus;
		}

		_tripStatus = tripStatus;
	}

	public String getOriginalTripStatus() {
		return GetterUtil.getString(_originalTripStatus);
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BookingStatus.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BookingStatus toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BookingStatus)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BookingStatusImpl bookingStatusImpl = new BookingStatusImpl();

		bookingStatusImpl.setBsId(getBsId());
		bookingStatusImpl.setUserId(getUserId());
		bookingStatusImpl.setBrtId(getBrtId());
		bookingStatusImpl.setStatus(getStatus());
		bookingStatusImpl.setTripStatus(getTripStatus());
		bookingStatusImpl.setCreateDate(getCreateDate());

		bookingStatusImpl.resetOriginalValues();

		return bookingStatusImpl;
	}

	@Override
	public int compareTo(BookingStatus bookingStatus) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				bookingStatus.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BookingStatus)) {
			return false;
		}

		BookingStatus bookingStatus = (BookingStatus)obj;

		long primaryKey = bookingStatus.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BookingStatusModelImpl bookingStatusModelImpl = this;

		bookingStatusModelImpl._originalUserId = bookingStatusModelImpl._userId;

		bookingStatusModelImpl._setOriginalUserId = false;

		bookingStatusModelImpl._originalBrtId = bookingStatusModelImpl._brtId;

		bookingStatusModelImpl._setOriginalBrtId = false;

		bookingStatusModelImpl._originalStatus = bookingStatusModelImpl._status;

		bookingStatusModelImpl._originalTripStatus = bookingStatusModelImpl._tripStatus;

		bookingStatusModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BookingStatus> toCacheModel() {
		BookingStatusCacheModel bookingStatusCacheModel = new BookingStatusCacheModel();

		bookingStatusCacheModel.bsId = getBsId();

		bookingStatusCacheModel.userId = getUserId();

		bookingStatusCacheModel.brtId = getBrtId();

		bookingStatusCacheModel.status = getStatus();

		String status = bookingStatusCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			bookingStatusCacheModel.status = null;
		}

		bookingStatusCacheModel.tripStatus = getTripStatus();

		String tripStatus = bookingStatusCacheModel.tripStatus;

		if ((tripStatus != null) && (tripStatus.length() == 0)) {
			bookingStatusCacheModel.tripStatus = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			bookingStatusCacheModel.createDate = createDate.getTime();
		}
		else {
			bookingStatusCacheModel.createDate = Long.MIN_VALUE;
		}

		return bookingStatusCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{bsId=");
		sb.append(getBsId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", brtId=");
		sb.append(getBrtId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", tripStatus=");
		sb.append(getTripStatus());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.services.model.BookingStatus");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bsId</column-name><column-value><![CDATA[");
		sb.append(getBsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brtId</column-name><column-value><![CDATA[");
		sb.append(getBrtId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tripStatus</column-name><column-value><![CDATA[");
		sb.append(getTripStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BookingStatus.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BookingStatus.class
		};
	private long _bsId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _brtId;
	private long _originalBrtId;
	private boolean _setOriginalBrtId;
	private String _status;
	private String _originalStatus;
	private String _tripStatus;
	private String _originalTripStatus;
	private Date _createDate;
	private long _columnBitmask;
	private BookingStatus _escapedModel;
}