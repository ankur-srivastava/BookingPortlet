/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.services.model.BusAvailability;
import com.services.model.BusAvailabilityModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BusAvailability service. Represents a row in the &quot;JPB_BusAvailability&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.services.model.BusAvailabilityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BusAvailabilityImpl}.
 * </p>
 *
 * @author Ankur Srivastava
 * @see BusAvailabilityImpl
 * @see com.services.model.BusAvailability
 * @see com.services.model.BusAvailabilityModel
 * @generated
 */
public class BusAvailabilityModelImpl extends BaseModelImpl<BusAvailability>
	implements BusAvailabilityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bus availability model instance should use the {@link com.services.model.BusAvailability} interface instead.
	 */
	public static final String TABLE_NAME = "JPB_BusAvailability";
	public static final Object[][] TABLE_COLUMNS = {
			{ "baId", Types.BIGINT },
			{ "brtId", Types.BIGINT },
			{ "total", Types.BIGINT },
			{ "available", Types.BIGINT },
			{ "price", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table JPB_BusAvailability (baId LONG not null primary key,brtId LONG,total LONG,available LONG,price LONG,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table JPB_BusAvailability";
	public static final String ORDER_BY_JPQL = " ORDER BY busAvailability.available ASC";
	public static final String ORDER_BY_SQL = " ORDER BY JPB_BusAvailability.available ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.services.model.BusAvailability"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.services.model.BusAvailability"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.services.model.BusAvailability"),
			true);
	public static long AVAILABLE_COLUMN_BITMASK = 1L;
	public static long BRTID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.services.model.BusAvailability"));

	public BusAvailabilityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _baId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _baId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BusAvailability.class;
	}

	@Override
	public String getModelClassName() {
		return BusAvailability.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("baId", getBaId());
		attributes.put("brtId", getBrtId());
		attributes.put("total", getTotal());
		attributes.put("available", getAvailable());
		attributes.put("price", getPrice());
		attributes.put("createDate", getCreateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long baId = (Long)attributes.get("baId");

		if (baId != null) {
			setBaId(baId);
		}

		Long brtId = (Long)attributes.get("brtId");

		if (brtId != null) {
			setBrtId(brtId);
		}

		Long total = (Long)attributes.get("total");

		if (total != null) {
			setTotal(total);
		}

		Long available = (Long)attributes.get("available");

		if (available != null) {
			setAvailable(available);
		}

		Long price = (Long)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@Override
	public long getBaId() {
		return _baId;
	}

	@Override
	public void setBaId(long baId) {
		_baId = baId;
	}

	@Override
	public long getBrtId() {
		return _brtId;
	}

	@Override
	public void setBrtId(long brtId) {
		_columnBitmask |= BRTID_COLUMN_BITMASK;

		if (!_setOriginalBrtId) {
			_setOriginalBrtId = true;

			_originalBrtId = _brtId;
		}

		_brtId = brtId;
	}

	public long getOriginalBrtId() {
		return _originalBrtId;
	}

	@Override
	public long getTotal() {
		return _total;
	}

	@Override
	public void setTotal(long total) {
		_total = total;
	}

	@Override
	public long getAvailable() {
		return _available;
	}

	@Override
	public void setAvailable(long available) {
		_columnBitmask = -1L;

		if (!_setOriginalAvailable) {
			_setOriginalAvailable = true;

			_originalAvailable = _available;
		}

		_available = available;
	}

	public long getOriginalAvailable() {
		return _originalAvailable;
	}

	@Override
	public long getPrice() {
		return _price;
	}

	@Override
	public void setPrice(long price) {
		_price = price;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BusAvailability.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BusAvailability toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BusAvailability)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BusAvailabilityImpl busAvailabilityImpl = new BusAvailabilityImpl();

		busAvailabilityImpl.setBaId(getBaId());
		busAvailabilityImpl.setBrtId(getBrtId());
		busAvailabilityImpl.setTotal(getTotal());
		busAvailabilityImpl.setAvailable(getAvailable());
		busAvailabilityImpl.setPrice(getPrice());
		busAvailabilityImpl.setCreateDate(getCreateDate());

		busAvailabilityImpl.resetOriginalValues();

		return busAvailabilityImpl;
	}

	@Override
	public int compareTo(BusAvailability busAvailability) {
		int value = 0;

		if (getAvailable() < busAvailability.getAvailable()) {
			value = -1;
		}
		else if (getAvailable() > busAvailability.getAvailable()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BusAvailability)) {
			return false;
		}

		BusAvailability busAvailability = (BusAvailability)obj;

		long primaryKey = busAvailability.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BusAvailabilityModelImpl busAvailabilityModelImpl = this;

		busAvailabilityModelImpl._originalBrtId = busAvailabilityModelImpl._brtId;

		busAvailabilityModelImpl._setOriginalBrtId = false;

		busAvailabilityModelImpl._originalAvailable = busAvailabilityModelImpl._available;

		busAvailabilityModelImpl._setOriginalAvailable = false;

		busAvailabilityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BusAvailability> toCacheModel() {
		BusAvailabilityCacheModel busAvailabilityCacheModel = new BusAvailabilityCacheModel();

		busAvailabilityCacheModel.baId = getBaId();

		busAvailabilityCacheModel.brtId = getBrtId();

		busAvailabilityCacheModel.total = getTotal();

		busAvailabilityCacheModel.available = getAvailable();

		busAvailabilityCacheModel.price = getPrice();

		Date createDate = getCreateDate();

		if (createDate != null) {
			busAvailabilityCacheModel.createDate = createDate.getTime();
		}
		else {
			busAvailabilityCacheModel.createDate = Long.MIN_VALUE;
		}

		return busAvailabilityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{baId=");
		sb.append(getBaId());
		sb.append(", brtId=");
		sb.append(getBrtId());
		sb.append(", total=");
		sb.append(getTotal());
		sb.append(", available=");
		sb.append(getAvailable());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.services.model.BusAvailability");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>baId</column-name><column-value><![CDATA[");
		sb.append(getBaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brtId</column-name><column-value><![CDATA[");
		sb.append(getBrtId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>total</column-name><column-value><![CDATA[");
		sb.append(getTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>available</column-name><column-value><![CDATA[");
		sb.append(getAvailable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BusAvailability.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BusAvailability.class
		};
	private long _baId;
	private long _brtId;
	private long _originalBrtId;
	private boolean _setOriginalBrtId;
	private long _total;
	private long _available;
	private long _originalAvailable;
	private boolean _setOriginalAvailable;
	private long _price;
	private Date _createDate;
	private long _columnBitmask;
	private BusAvailability _escapedModel;
}